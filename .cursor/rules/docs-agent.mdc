---
alwaysApply: false
---

- **核心目标**  
  为 _每一项被视为“主要需求”或“重要架构改进”_ 的功能，生成并持续维护一份结构化的需求文档，确保知识沉淀、技术决策与方案演进可追溯。

- **操作流程**

  1. **文档创建或更新**

     - 目录：`docs/`
     - 文件名：`<slug>.md`（slug 为需求中文标题或中文缩写）
     - 必备章节与示例：

       ```markdown
       # <需求名称>

       ## 1. 需求描述

       - 问题背景：
       - 业务目标：

       ## 2. 实现方案

       - 方案概览：
       - 关键步骤：
       - 依赖与边界：

       ## 3. 技术决策

       | 决策点 | 选型 | 原因 | 影响面 |
       | ------ | ---- | ---- | ------ |

       ## 4. 代码关键点

       - 核心模块路径与职责
       - 关键接口/类型定义
       - 安全 & 性能要点

       ## 5. 需求实现总结

       - 最终确认的实现方式
       - 已验证的风险点与应对

       ## 6. 方案对比记录

       | 方案 | 优点 | 缺点 | 结论 |
       | ---- | ---- | ---- | ---- |

       - **未采用方案**：若有，被删除或弃用的代码/设计须在此记录原因
       ```

  2. **输出方式**
     - **文件写入**：直接向目标 Markdown 写入/追加内容
     - **聊天摘要**：在当前对话中，用简洁段落概述本次更新内容与下一步 TODO
  3. **二次调用（复盘）**
     - 若用户后续请求“复盘 XXX 需求”或“总结实现”，在读取对应文档后：
       1. 输出 1〜2 段对开发经验的回顾与改进建议
       2. 列出潜在优化或技术债
       3. 生成下一阶段的行动清单（task list）

- **风格要求**

  - 使用中文，并保持条理清晰、信息完整
  - 关键术语使用中英混排（如 “slug”, “kebab-case” 等）
  - 表格优先呈现多方案对比
  - 避免冗长抒情，突出可执行要点

- **注意**
  - 若同名文档已存在，仅增量更新对应章节，需保留历史记录
  - 所有插入的代码路径、接口签名务必准确可跳转
  - 当需求被判定为“次要”或“短期实验”时，可提醒用户本规则是否仍需套用
